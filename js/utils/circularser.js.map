{"version":3,"sources":["/projects/nodejs/botbuilder/abot_utils/src/../src/utils/circularser.ts"],"names":[],"mappings":"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","file":"utils/circularser.js","sourcesContent":["/**\n * (c) gerd forstmann 2017\n */\n'use strict';\n\nvar JSONx = require('circular-json');\n\nimport * as fs from 'fs';\nimport * as debug from 'debug';\n\nimport * as zlib from 'zlib';\n\nconst debuglog = debug('circularser');\n\n\nfunction zipData(data : string)  : Buffer {\n    var r = zlib.deflateSync(Buffer.from(data,'utf-8'));\n    //console.log(\"here r\" + typeof r + \" r\" + r.length + \" to string\" + r.toString().length);\n    var k = zlib.inflateSync(r);\n   //  var k = zlib.inflateSync(Buffer.from(r.toString()));\n    return r;\n}\n\nfunction unzipData(r : any) : string {\n    //console.log(\"here data  \" + typeof r + \" r\" + r.length + \" to string\" + r.toString().length);\n    r = new Buffer(r, 'binary');\n      //console.log(\"here data  \" + typeof r + \" r\" + r.length + \" to string\" + r.toString().length);\n    return zlib.inflateSync(r).toString();\n}\n\n/* this from http://stackoverflow.com/questions/12075927/serialization-of-regexp */\nfunction replacer(key, value) {\n  if (value instanceof RegExp)\n    return (\"__REGEXP \" + value.toString());\n  else\n    return value;\n}\n\nfunction reviver(key, value) {\n  if (value && value.toString().indexOf(\"__REGEXP \") == 0) {\n    var m = value.split(\"__REGEXP \")[1].match(/\\/(.*)\\/(.*)?/);\n    return new RegExp(m[1], m[2] || \"\");\n  } else\n    return value;\n}\n\n//console.logJSON.parse(JSON.stringify(obj, replacer, 2), reviver));\n\nexport function stringify(obj: any) : string {\n    var s = JSONx.stringify(obj, replacer);\n    return s;\n}\n\nexport function parse(s: string) : any {\n    var obj;\n    try {\n        obj = JSONx.parse(s, reviver);\n    } catch (e) {\n        //console.log(\"here e\" + e);\n        return undefined;\n    }\n    return obj;\n}\n\nexport function save(fn : string, obj: any) : void {\n    var s = stringify(obj);\n\n    var u = zipData(s);\n    fs.writeFileSync(fn + \".zip\", u,  'binary'); // { encoding : 'utf-8'});\n}\n\nexport function load(fn: string) {\n    var obj;\n    try {\n        debuglog(\"read file \" + fn);\n        var d =  fs.readFileSync(fn + \".zip\", 'binary'); // utf-8'); //utf-8');\n        debuglog(\"start unzip : \" + (typeof d) + \" length ? \" + ('' + d).length );\n        var s = '' + unzipData(d);\n        debuglog('loaded file' + s.length);\n        debuglog(\"end unzip\");\n        if(global && global.gc) {\n            global.gc();\n        }\n        obj = parse(s);\n        if(global && global.gc) {\n            global.gc();\n        }\n        debuglog(\"end parse\");\n    } catch (e) {\n        debuglog('here e :' +e);\n        return undefined;\n    }\n    return obj;\n}\n"],"sourceRoot":"ABC"}