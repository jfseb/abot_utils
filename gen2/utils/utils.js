'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", { value: true });
function deepFreeze(o) {
    if ((typeof o === "undefined" ? "undefined" : _typeof(o)) === "object") {
        Object.keys(o).forEach(function (sKey) {
            deepFreeze(o[sKey]);
        });
        Object.freeze(o);
    }
}
exports.deepFreeze = deepFreeze;
function listToQuotedCommaWord(list, quote, word) {
    quote = quote || "";
    if (list.length === 0) {
        return quote + quote;
    }
    var base = list.slice(0, list.length - 1).join(quote + ", " + quote);
    if (base) {
        base = quote + base + quote + ' ' + word + ' ' + quote + list[list.length - 1] + quote;
        return base;
    }
    return quote + list[0] + quote;
}
exports.listToQuotedCommaWord = listToQuotedCommaWord;
function listToCommaAnd(list, quote) {
    return listToQuotedCommaWord(list, quote, 'and');
}
exports.listToCommaAnd = listToCommaAnd;
function listToCommaOr(list, quote) {
    return listToQuotedCommaWord(list, '', 'or');
}
exports.listToCommaOr = listToCommaOr;
function listToQuotedCommaAnd(list) {
    return listToQuotedCommaWord(list, '"', 'and');
}
exports.listToQuotedCommaAnd = listToQuotedCommaAnd;
function listToQuotedCommaOr(list, quote) {
    return listToQuotedCommaWord(list, '"', 'or');
}
exports.listToQuotedCommaOr = listToQuotedCommaOr;
function stripQuotes(str) {
    if (str.length > 2 && str.charAt(0) === '"' && str.charAt(str.length - 1) === '"') {
        return str.substring(1, str.length - 1);
    }
    return str;
}
exports.stripQuotes = stripQuotes;
// courtesy of
// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript
function cloneDeep(item) {
    if (!item) {
        return item;
    } // null, undefined values check
    var types = [Number, String, Boolean],
        result;
    // normalizing primitives if someone did new String('aaa'), or new Number('444');
    types.forEach(function (type) {
        if (item instanceof type) {
            result = type(item);
        }
    });
    if (typeof result == "undefined") {
        if (Object.prototype.toString.call(item) === "[object Array]") {
            result = [];
            item.forEach(function (child, index, array) {
                result[index] = cloneDeep(child);
            });
        } else if ((typeof item === 'undefined' ? 'undefined' : typeof item === "undefined" ? "undefined" : _typeof(item)) == "object") {
            // testing that this is DOM
            if (!item.prototype) {
                if (item instanceof Date) {
                    result = new Date(item);
                } else {
                    // it is an object literal
                    result = {};
                    for (var i in item) {
                        result[i] = cloneDeep(item[i]);
                    }
                }
            } else {
                // depending what you would like here,
                //   // just keep the reference, or create new object
                //   if (false && item.constructor) {
                // would not advice to do that, reason? Read below
                //        result = new item.constructor();
                //    } else {
                result = item;
            }
        } else {
            result = item;
        }
    }
    return result;
}
exports.cloneDeep = cloneDeep;
exports.ArrayUtils = {
    indexOf: function indexOf(oMember, aArr, fnComp) {
        fnComp = fnComp || function (a, b) {
            return a === b;
        };
        var resIndex = -1;
        aArr.every(function (oMemberArr, index) {
            var u = fnComp(oMemberArr, oMember);
            if (u) {
                resIndex = index;
                return false;
            }
            return true;
        });
        return resIndex;
    },
    presentIn: function presentIn(oMember, aArr, fnComp) {
        return exports.ArrayUtils.indexOf(oMember, aArr, fnComp) >= 0;
    },
    setMinus: function setMinus(aRR1, aRR2, fnComp) {
        fnComp = fnComp || function (a, b) {
            return a === b;
        };
        return aRR1.reduce(function (Result, oMember, index) {
            if (!exports.ArrayUtils.presentIn(oMember, aRR2, fnComp) && !exports.ArrayUtils.presentIn(oMember, Result, fnComp)) {
                Result.push(oMember);
            }
            return Result;
        }, []);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy91dGlscy50cyIsInV0aWxzL3V0aWxzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVlcEZyZWV6ZSIsIm8iLCJrZXlzIiwiZm9yRWFjaCIsInNLZXkiLCJmcmVlemUiLCJsaXN0VG9RdW90ZWRDb21tYVdvcmQiLCJsaXN0IiwicXVvdGUiLCJ3b3JkIiwibGVuZ3RoIiwiYmFzZSIsInNsaWNlIiwiam9pbiIsImxpc3RUb0NvbW1hQW5kIiwibGlzdFRvQ29tbWFPciIsImxpc3RUb1F1b3RlZENvbW1hQW5kIiwibGlzdFRvUXVvdGVkQ29tbWFPciIsInN0cmlwUXVvdGVzIiwic3RyIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwiY2xvbmVEZWVwIiwiaXRlbSIsInR5cGVzIiwiTnVtYmVyIiwiU3RyaW5nIiwiQm9vbGVhbiIsInJlc3VsdCIsInR5cGUiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJjaGlsZCIsImluZGV4IiwiYXJyYXkiLCJEYXRlIiwiaSIsIkFycmF5VXRpbHMiLCJpbmRleE9mIiwib01lbWJlciIsImFBcnIiLCJmbkNvbXAiLCJhIiwiYiIsInJlc0luZGV4IiwiZXZlcnkiLCJvTWVtYmVyQXJyIiwidSIsInByZXNlbnRJbiIsInNldE1pbnVzIiwiYVJSMSIsImFSUjIiLCJyZWR1Y2UiLCJSZXN1bHQiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQ0NBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QURBQSxTQUFBQyxVQUFBLENBQTJCQyxDQUEzQixFQUFrQztBQUNoQyxRQUFJLFFBQU9BLENBQVAseUNBQU9BLENBQVAsT0FBYSxRQUFqQixFQUEyQjtBQUN6QkwsZUFBT00sSUFBUCxDQUFZRCxDQUFaLEVBQWVFLE9BQWYsQ0FBdUIsVUFBU0MsSUFBVCxFQUFhO0FBQ2xD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bHMvdXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5leHBvcnQgZnVuY3Rpb24gZGVlcEZyZWV6ZShvIDogYW55KSB7XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKG8pLmZvckVhY2goZnVuY3Rpb24oc0tleSkge1xuICAgICAgZGVlcEZyZWV6ZShvW3NLZXldKTtcbiAgICB9KTtcbiAgICBPYmplY3QuZnJlZXplKG8pO1xuICB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RUb1F1b3RlZENvbW1hV29yZChsaXN0IDogc3RyaW5nW10sIHF1b3RlIDogc3RyaW5nLCB3b3JkOiBzdHJpbmcpIHtcbiAgICBxdW90ZSA9IHF1b3RlIHx8IFwiXCI7XG4gICAgaWYoIGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBxdW90ZSArIHF1b3RlO1xuICAgIH1cbiAgICB2YXIgYmFzZSA9IGxpc3Quc2xpY2UoMCxsaXN0Lmxlbmd0aC0xKS5qb2luKHF1b3RlICsgXCIsIFwiICsgcXVvdGUpO1xuICAgIGlmKGJhc2UpIHtcbiAgICAgICAgYmFzZSA9IHF1b3RlICsgYmFzZSArIHF1b3RlICsgJyAnICsgd29yZCArICcgJyArIHF1b3RlICsgbGlzdFtsaXN0Lmxlbmd0aC0xXSArIHF1b3RlO1xuICAgICAgICByZXR1cm4gYmFzZTtcbiAgICB9XG4gICAgcmV0dXJuIHF1b3RlICsgbGlzdFswXSArIHF1b3RlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlzdFRvQ29tbWFBbmQobGlzdCA6IHN0cmluZ1tdLCBxdW90ZT8gOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbGlzdFRvUXVvdGVkQ29tbWFXb3JkKGxpc3QscXVvdGUsICdhbmQnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBsaXN0VG9Db21tYU9yKGxpc3QgOiBzdHJpbmdbXSwgcXVvdGU/IDogc3RyaW5nKSB7XG4gICAgcmV0dXJuICBsaXN0VG9RdW90ZWRDb21tYVdvcmQobGlzdCwnJywgJ29yJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXN0VG9RdW90ZWRDb21tYUFuZChsaXN0IDogc3RyaW5nW10pIHtcbiAgICByZXR1cm4gbGlzdFRvUXVvdGVkQ29tbWFXb3JkKGxpc3QsJ1wiJywnYW5kJyk7XG59XG5leHBvcnQgZnVuY3Rpb24gbGlzdFRvUXVvdGVkQ29tbWFPcihsaXN0IDogc3RyaW5nW10sIHF1b3RlPyA6IHN0cmluZykge1xuICAgIHJldHVybiAgbGlzdFRvUXVvdGVkQ29tbWFXb3JkKGxpc3QsJ1wiJywgJ29yJyk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwUXVvdGVzKHN0ciA6IHN0cmluZykgOiBzdHJpbmcge1xuICAgIGlmKHN0ci5sZW5ndGggPiAyICYmIHN0ci5jaGFyQXQoMCkgPT09ICdcIicgJiYgc3RyLmNoYXJBdChzdHIubGVuZ3RoIC0gMSkgPT09ICdcIicpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMSxzdHIubGVuZ3RoLTEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG4vLyBjb3VydGVzeSBvZlxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NDU5OTI4L2hvdy10by1kZWVwLWNsb25lLWluLWphdmFzY3JpcHRcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZURlZXAoaXRlbSA6IGFueSkgOiBhbnkgIHtcbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSAvLyBudWxsLCB1bmRlZmluZWQgdmFsdWVzIGNoZWNrXG4gICAgdmFyIHR5cGVzID0gW051bWJlciwgU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgcmVzdWx0O1xuICAgIC8vIG5vcm1hbGl6aW5nIHByaW1pdGl2ZXMgaWYgc29tZW9uZSBkaWQgbmV3IFN0cmluZygnYWFhJyksIG9yIG5ldyBOdW1iZXIoJzQ0NCcpO1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0eXBlKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZW0pID09PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgaXRlbS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNsb25lRGVlcChjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgodHlwZW9mIGl0ZW0gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiB0eXBlb2YgaXRlbSkgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gdGVzdGluZyB0aGF0IHRoaXMgaXMgRE9NXG4gICAgICAgICAgICBpZiAoIWl0ZW0ucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IGlzIGFuIG9iamVjdCBsaXRlcmFsXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IGNsb25lRGVlcChpdGVtW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZXBlbmRpbmcgd2hhdCB5b3Ugd291bGQgbGlrZSBoZXJlLFxuICAgICAgICAgICAgICAgIC8vICAgLy8ganVzdCBrZWVwIHRoZSByZWZlcmVuY2UsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0XG4gICAgICAgICAgICAgICAgLy8gICBpZiAoZmFsc2UgJiYgaXRlbS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgICAgIC8vIHdvdWxkIG5vdCBhZHZpY2UgdG8gZG8gdGhhdCwgcmVhc29uPyBSZWFkIGJlbG93XG4gICAgICAgICAgICAgICAgLy8gICAgICAgIHJlc3VsdCA9IG5ldyBpdGVtLmNvbnN0cnVjdG9yKCk7XG4gICAgICAgICAgICAgICAgLy8gICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gaXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG50eXBlIGZuYSA9IChhIDogbnVtYmVyLGIgOiBudW1iZXIpID0+IG51bWJlcjtcblxudHlwZSBmbkNvbXA8VD4gPSAoYSA6IFQsYiA6IFQpID0+IGJvb2xlYW47XG5cblxuZXhwb3J0IGNvbnN0IEFycmF5VXRpbHMgPSB7XG5cbiAgaW5kZXhPZiA6IGZ1bmN0aW9uPFQ+KG9NZW1iZXIgOiBULCBhQXJyIDogQXJyYXk8VD4sIGZuQ29tcCA6IGZuQ29tcDxUPiApIDogbnVtYmVyIHtcbiAgICBmbkNvbXAgPSBmbkNvbXAgfHwgZnVuY3Rpb24gKGE6VCwgYjpUKSB7IHJldHVybiBhID09PSBiIH07XG4gICAgdmFyIHJlc0luZGV4ID0gLTE7XG4gICAgYUFyci5ldmVyeShmdW5jdGlvbiAob01lbWJlckFyciwgaW5kZXgpIHtcbiAgICAgIHZhciB1ID0gZm5Db21wKG9NZW1iZXJBcnIsb01lbWJlcik7XG4gICAgICBpZih1KSB7XG4gICAgICAgIHJlc0luZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXNJbmRleDtcbiAgfSxcblxuICBwcmVzZW50SW4gOiBmdW5jdGlvbjxUPihvTWVtYmVyIDogVCwgYUFyciA6IEFycmF5PFQ+LCBmbkNvbXA/IDogZm5Db21wPFQ+ICkgOiBib29sZWFuIHtcbiAgICByZXR1cm4gQXJyYXlVdGlscy5pbmRleE9mKG9NZW1iZXIsIGFBcnIsIGZuQ29tcCkgPj0gMDtcbiAgfSxcblxuXG4gIHNldE1pbnVzIDogZnVuY3Rpb248VD4oYVJSMSA6IEFycmF5PFQ+LCBhUlIyIDogQXJyYXk8VD4sIGZuQ29tcD8gOiBmbkNvbXA8VD4pICB7XG4gICAgZm5Db21wID0gZm5Db21wIHx8IGZ1bmN0aW9uIChhOlQsIGI6VCkgeyByZXR1cm4gYSA9PT0gYiB9O1xuICAgIHJldHVybiAgYVJSMS5yZWR1Y2UoZnVuY3Rpb24oUmVzdWx0LCBvTWVtYmVyLCBpbmRleCkge1xuICAgICAgaWYgKCFBcnJheVV0aWxzLnByZXNlbnRJbihvTWVtYmVyLCBhUlIyLCBmbkNvbXApICYmICFBcnJheVV0aWxzLnByZXNlbnRJbihvTWVtYmVyLCBSZXN1bHQsIGZuQ29tcCkpIHtcbiAgICAgICAgUmVzdWx0LnB1c2gob01lbWJlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVzdWx0O1xuICAgIH0sW10gYXMgQXJyYXk8VD4pO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBkZWVwRnJlZXplKG8pIHtcbiAgICBpZiAodHlwZW9mIG8gPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbiAoc0tleSkge1xuICAgICAgICAgICAgZGVlcEZyZWV6ZShvW3NLZXldKTtcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5mcmVlemUobyk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWVwRnJlZXplID0gZGVlcEZyZWV6ZTtcbmZ1bmN0aW9uIGxpc3RUb1F1b3RlZENvbW1hV29yZChsaXN0LCBxdW90ZSwgd29yZCkge1xuICAgIHF1b3RlID0gcXVvdGUgfHwgXCJcIjtcbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHF1b3RlICsgcXVvdGU7XG4gICAgfVxuICAgIHZhciBiYXNlID0gbGlzdC5zbGljZSgwLCBsaXN0Lmxlbmd0aCAtIDEpLmpvaW4ocXVvdGUgKyBcIiwgXCIgKyBxdW90ZSk7XG4gICAgaWYgKGJhc2UpIHtcbiAgICAgICAgYmFzZSA9IHF1b3RlICsgYmFzZSArIHF1b3RlICsgJyAnICsgd29yZCArICcgJyArIHF1b3RlICsgbGlzdFtsaXN0Lmxlbmd0aCAtIDFdICsgcXVvdGU7XG4gICAgICAgIHJldHVybiBiYXNlO1xuICAgIH1cbiAgICByZXR1cm4gcXVvdGUgKyBsaXN0WzBdICsgcXVvdGU7XG59XG5leHBvcnRzLmxpc3RUb1F1b3RlZENvbW1hV29yZCA9IGxpc3RUb1F1b3RlZENvbW1hV29yZDtcbmZ1bmN0aW9uIGxpc3RUb0NvbW1hQW5kKGxpc3QsIHF1b3RlKSB7XG4gICAgcmV0dXJuIGxpc3RUb1F1b3RlZENvbW1hV29yZChsaXN0LCBxdW90ZSwgJ2FuZCcpO1xufVxuZXhwb3J0cy5saXN0VG9Db21tYUFuZCA9IGxpc3RUb0NvbW1hQW5kO1xuZnVuY3Rpb24gbGlzdFRvQ29tbWFPcihsaXN0LCBxdW90ZSkge1xuICAgIHJldHVybiBsaXN0VG9RdW90ZWRDb21tYVdvcmQobGlzdCwgJycsICdvcicpO1xufVxuZXhwb3J0cy5saXN0VG9Db21tYU9yID0gbGlzdFRvQ29tbWFPcjtcbmZ1bmN0aW9uIGxpc3RUb1F1b3RlZENvbW1hQW5kKGxpc3QpIHtcbiAgICByZXR1cm4gbGlzdFRvUXVvdGVkQ29tbWFXb3JkKGxpc3QsICdcIicsICdhbmQnKTtcbn1cbmV4cG9ydHMubGlzdFRvUXVvdGVkQ29tbWFBbmQgPSBsaXN0VG9RdW90ZWRDb21tYUFuZDtcbmZ1bmN0aW9uIGxpc3RUb1F1b3RlZENvbW1hT3IobGlzdCwgcXVvdGUpIHtcbiAgICByZXR1cm4gbGlzdFRvUXVvdGVkQ29tbWFXb3JkKGxpc3QsICdcIicsICdvcicpO1xufVxuZXhwb3J0cy5saXN0VG9RdW90ZWRDb21tYU9yID0gbGlzdFRvUXVvdGVkQ29tbWFPcjtcbmZ1bmN0aW9uIHN0cmlwUXVvdGVzKHN0cikge1xuICAgIGlmIChzdHIubGVuZ3RoID4gMiAmJiBzdHIuY2hhckF0KDApID09PSAnXCInICYmIHN0ci5jaGFyQXQoc3RyLmxlbmd0aCAtIDEpID09PSAnXCInKSB7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDEsIHN0ci5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydHMuc3RyaXBRdW90ZXMgPSBzdHJpcFF1b3Rlcztcbi8vIGNvdXJ0ZXN5IG9mXG4vLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ0NTk5MjgvaG93LXRvLWRlZXAtY2xvbmUtaW4tamF2YXNjcmlwdFxuZnVuY3Rpb24gY2xvbmVEZWVwKGl0ZW0pIHtcbiAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSAvLyBudWxsLCB1bmRlZmluZWQgdmFsdWVzIGNoZWNrXG4gICAgdmFyIHR5cGVzID0gW051bWJlciwgU3RyaW5nLCBCb29sZWFuXSwgcmVzdWx0O1xuICAgIC8vIG5vcm1hbGl6aW5nIHByaW1pdGl2ZXMgaWYgc29tZW9uZSBkaWQgbmV3IFN0cmluZygnYWFhJyksIG9yIG5ldyBOdW1iZXIoJzQ0NCcpO1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiB0eXBlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSB0eXBlKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGl0ZW0pID09PSBcIltvYmplY3QgQXJyYXldXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgaXRlbS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgsIGFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGNsb25lRGVlcChjaGlsZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgodHlwZW9mIGl0ZW0gPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiB0eXBlb2YgaXRlbSkgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gdGVzdGluZyB0aGF0IHRoaXMgaXMgRE9NXG4gICAgICAgICAgICBpZiAoIWl0ZW0ucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgaXMgYW4gb2JqZWN0IGxpdGVyYWxcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gY2xvbmVEZWVwKGl0ZW1baV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZGVwZW5kaW5nIHdoYXQgeW91IHdvdWxkIGxpa2UgaGVyZSxcbiAgICAgICAgICAgICAgICAvLyAgIC8vIGp1c3Qga2VlcCB0aGUgcmVmZXJlbmNlLCBvciBjcmVhdGUgbmV3IG9iamVjdFxuICAgICAgICAgICAgICAgIC8vICAgaWYgKGZhbHNlICYmIGl0ZW0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICAvLyB3b3VsZCBub3QgYWR2aWNlIHRvIGRvIHRoYXQsIHJlYXNvbj8gUmVhZCBiZWxvd1xuICAgICAgICAgICAgICAgIC8vICAgICAgICByZXN1bHQgPSBuZXcgaXRlbS5jb25zdHJ1Y3RvcigpO1xuICAgICAgICAgICAgICAgIC8vICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuZXhwb3J0cy5BcnJheVV0aWxzID0ge1xuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIChvTWVtYmVyLCBhQXJyLCBmbkNvbXApIHtcbiAgICAgICAgZm5Db21wID0gZm5Db21wIHx8IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhID09PSBiOyB9O1xuICAgICAgICB2YXIgcmVzSW5kZXggPSAtMTtcbiAgICAgICAgYUFyci5ldmVyeShmdW5jdGlvbiAob01lbWJlckFyciwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciB1ID0gZm5Db21wKG9NZW1iZXJBcnIsIG9NZW1iZXIpO1xuICAgICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgICAgICByZXNJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc0luZGV4O1xuICAgIH0sXG4gICAgcHJlc2VudEluOiBmdW5jdGlvbiAob01lbWJlciwgYUFyciwgZm5Db21wKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLkFycmF5VXRpbHMuaW5kZXhPZihvTWVtYmVyLCBhQXJyLCBmbkNvbXApID49IDA7XG4gICAgfSxcbiAgICBzZXRNaW51czogZnVuY3Rpb24gKGFSUjEsIGFSUjIsIGZuQ29tcCkge1xuICAgICAgICBmbkNvbXAgPSBmbkNvbXAgfHwgZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgPT09IGI7IH07XG4gICAgICAgIHJldHVybiBhUlIxLnJlZHVjZShmdW5jdGlvbiAoUmVzdWx0LCBvTWVtYmVyLCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKCFleHBvcnRzLkFycmF5VXRpbHMucHJlc2VudEluKG9NZW1iZXIsIGFSUjIsIGZuQ29tcCkgJiYgIWV4cG9ydHMuQXJyYXlVdGlscy5wcmVzZW50SW4ob01lbWJlciwgUmVzdWx0LCBmbkNvbXApKSB7XG4gICAgICAgICAgICAgICAgUmVzdWx0LnB1c2gob01lbWJlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0O1xuICAgICAgICB9LCBbXSk7XG4gICAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
